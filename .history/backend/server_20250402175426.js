// server.js
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '.env') });

console.log('Th∆∞ m·ª•c hi·ªán t·∫°i (__dirname):', __dirname);
console.log('ƒê∆∞·ªùng d·∫´n file .env:', path.join(__dirname, '.env'));
console.log('N·ªôi dung GEMINI_API_KEY:', process.env.GEMINI_API_KEY ? process.env.GEMINI_API_KEY : 'undefined');
console.log('N·ªôi dung PORT:', process.env.PORT ? process.env.PORT : 'undefined');

const express = require('express');
const cors = require('cors');
const fs = require('fs');
const bcrypt = require('bcrypt');
const mongoose = require('mongoose');
const axios = require('axios');
const connectDB = require('./config/db');
const User = require('./models/user');
const Student = require('./models/Student');
const Score = require('./models/Score');

const app = express();
const PORT = process.env.PORT || 3000;
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';
const API_KEY = process.env.GEMINI_API_KEY;

// Middleware
app.use(cors({
    origin: ['http://localhost:3000', 'http://localhost:5500', 'http://127.0.0.1:5500', 'http://127.0.0.1:5501'],
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(express.json());

// H√†m g·ªçi API Gemini
const generateContent = async (text) => {
    try {
        if (!API_KEY) {
            throw new Error('GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong file .env');
        }

        console.log("üîç G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini API v·ªõi n·ªôi dung:", text);

        const response = await axios.post(
            GEMINI_API_URL,
            { contents: [{ parts: [{ text }] }] },
            {
                headers: { 'Content-Type': 'application/json' },
                params: { key: API_KEY }
            }
        );

        console.log("‚úÖ Ph·∫£n h·ªìi t·ª´ Gemini API:", JSON.stringify(response.data, null, 2));

        if (response.data && response.data.candidates) {
            return response.data.candidates[0]?.content?.parts?.[0]?.text || "Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ Gemini.";
        } else {
            return "L·ªói: Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá t·ª´ Gemini.";
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ªçi API Gemini:", error.response?.data || error.message);
        return `L·ªói API: ${error.response?.data?.error?.message || error.message}`;
    }
};

// ƒê·ªãnh nghƒ©a route c·ª• th·ªÉ cho /testdauvao2
app.get('/testdauvao2', (req, res) => {
    const baseDir = __dirname;
    const indexDir = path.resolve(baseDir, '../INDEX');
    const filePath = path.join(indexDir, 'testdauvao2.html');
    console.log('Th∆∞ m·ª•c g·ªëc server:', baseDir);
    console.log('Th∆∞ m·ª•c INDEX (tuy·ªát ƒë·ªëi):', indexDir);
    console.log('ƒêang t√¨m file testdauvao2.html t·∫°i:', filePath);

    if (fs.existsSync(filePath)) {
        console.log('File testdauvao2.html t·ªìn t·∫°i, ƒëang g·ª≠i:', filePath);
        res.sendFile(filePath);
    } else {
        console.error('File testdauvao2.html kh√¥ng t·ªìn t·∫°i t·∫°i:', filePath);
        res.status(404).json({
            message: 'Trang testdauvao2 kh√¥ng t·ªìn t·∫°i!',
            filePath: filePath,
            suggestion: 'Vui l√≤ng ki·ªÉm tra t√™n file ho·∫∑c ƒë∆∞·ªùng d·∫´n trong th∆∞ m·ª•c INDEX. ƒê·∫£m b·∫£o file testdauvao2.html t·ªìn t·∫°i.'
        });
    }
});

// X·ª≠ l√Ω c√°c bi·∫øn th·ªÉ route (nh∆∞ /testdauvao2:1)
app.get('/testdauvao2:*', (req, res) => {
    console.log('Ph√°t hi·ªán bi·∫øn th·ªÉ URL:', req.url);
    res.redirect('/testdauvao2');
});

// Ph·ª•c v·ª• file tƒ©nh t·ª´ th∆∞ m·ª•c INDEX
app.use(express.static(path.join(__dirname, '../INDEX')));

// C√°c route kh√°c
app.get('/login', (req, res) => res.sendFile(path.join(__dirname, '../INDEX', 'Login.html')));
app.get('/student', (req, res) => res.sendFile(path.join(__dirname, '../INDEX', 'Student.html')));
app.get('/input-test', (req, res) => res.sendFile(path.join(__dirname, '../INDEX', 'input-test.html')));
app.get('/home', (req, res) => res.sendFile(path.join(__dirname, '../INDEX', 'Home_Page.html')));
app.get('/diemdauvao', (req, res) => res.sendFile(path.join(__dirname, '../INDEX', 'diemdauvao.html')));
app.get('/student-info', (req, res) => res.sendFile(path.join(__dirname, '../INDEX', 'student-info.html')));
app.get('/quiz', (req, res) => res.sendFile(path.join(__dirname, '../INDEX', 'quiz.html')));

// Route l·∫•y c√¢u h·ªèi t·ª´ test2.json
app.get('/api/test-questions', (req, res) => {
    const { subject } = req.query;
    if (!subject) return res.status(400).json({ error: 'Thi·∫øu subject!' });
    const filePath = path.join(__dirname, '../INDEX', 'test2.json');
    fs.readFile(filePath, 'utf-8', (err, data) => {
        if (err) return res.status(500).json({ error: 'Kh√¥ng th·ªÉ ƒë·ªçc file!', details: err.message });
        try {
            const jsonData = JSON.parse(data);
            const questions = jsonData.questions.filter(q => q.subject === subject).slice(0, 50); // Gi·ªõi h·∫°n 10 c√¢u
            if (!questions.length) {
                return res.status(404).json({ error: `Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi cho m√¥n ${subject}!` });
            }
            res.json({ questions });
        } catch (error) {
            res.status(500).json({ error: 'L·ªói x·ª≠ l√Ω JSON!', details: error.message });
        }
    });
});

// Route l·∫•y c√¢u h·ªèi t·ª´ dethi.json
app.get('/api/questions', (req, res) => {
    const { subject, level } = req.query;
    if (!subject || !level) return res.status(400).json({ error: 'Thi·∫øu subject ho·∫∑c level!' });
    const filePath = path.join(__dirname, '../INDEX', 'dethi.json');
    fs.readFile(filePath, 'utf-8', (err, data) => {
        if (err) return res.status(500).json({ error: 'Kh√¥ng th·ªÉ ƒë·ªçc file!', details: err.message });
        try {
            const jsonData = JSON.parse(data);
            if (!jsonData[subject] || !jsonData[subject][level]) {
                return res.status(404).json({ error: `Kh√¥ng t√¨m th·∫•y ${subject} c·∫•p ${level}!` });
            }
            res.json({ questions: jsonData[subject][level] });
        } catch (error) {
            res.status(500).json({ error: 'L·ªói x·ª≠ l√Ω JSON!', details: error.message });
        }
    });
});

// Route g·ªçi Gemini API
app.post('/api/generate', async (req, res) => {
    const { text } = req.body;
    if (!text) return res.status(400).json({ error: 'Thi·∫øu text!' });

    try {
        const responseText = await generateContent(text);
        res.json({ reply: responseText });
    } catch (error) {
        console.error('L·ªói khi g·ªçi Gemini API t·ª´ server:', error.message);
        res.status(500).json({ reply: `L·ªói Gemini API: ${error.message}` });
    }
});

// API ƒëƒÉng k√Ω
app.post('/register', async (req, res) => {
    const { name, email, password } = req.body;
    if (!name || !email || !password) {
        return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin!' });
    }
    try {
        const hashedPassword = await bcrypt.hash(password, 10);
        const user = new User({ name, email, password: hashedPassword });
        await user.save();
        res.status(201).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng!', user: { name, email, id: user._id } });
    } catch (error) {
        res.status(400).json({ message: 'Email ƒë√£ t·ªìn t·∫°i!' });
    }
});

// API ƒëƒÉng nh·∫≠p
app.post('/login', async (req, res) => {
    const { email, password } = req.body;
    if (!email || !password) {
        return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p email v√† m·∫≠t kh·∫©u!' });
    }
    try {
        const user = await User.findOne({ email });
        if (!user || !await bcrypt.compare(password, user.password)) {
            return res.status(401).json({ message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!' });
        }
        res.json({ message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', user: { name: user.name, email: user.email, id: user._id } });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server!' });
    }
});

// API qu√™n m·∫≠t kh·∫©u
app.post('/forgot-password', async (req, res) => {
    const { email } = req.body;
    if (!email) return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p email!' });
    try {
        const user = await User.findOne({ email });
        if (!user) return res.status(404).json({ message: 'Email kh√¥ng t·ªìn t·∫°i!' });
        const resetCode = Math.random().toString(36).substring(2, 8).toUpperCase();
        user.resetCode = resetCode;
        await user.save();
        res.json({ message: `M√£ ƒë·∫∑t l·∫°i c·ªßa b·∫°n l√†: ${resetCode}. D√πng m√£ n√†y ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.` });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server!' });
    }
});

// API ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
app.post('/reset-password', async (req, res) => {
    const { email, resetCode, newPassword } = req.body;
    if (!email || !resetCode || !newPassword) {
        return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p email, m√£ x√°c nh·∫≠n v√† m·∫≠t kh·∫©u m·ªõi!' });
    }
    try {
        const user = await User.findOne({ email, resetCode });
        if (!user) return res.status(400).json({ message: 'M√£ ƒë·∫∑t l·∫°i kh√¥ng ƒë√∫ng!' });
        user.password = await bcrypt.hash(newPassword, 10);
        user.resetCode = null;
        await user.save();
        res.json({ message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!' });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server!' });
    }
});

// API l·∫•y danh s√°ch sinh vi√™n
app.get('/api/students', async (req, res) => {
    const userId = req.query.userId;
    if (!userId) return res.status(400).json({ message: 'Thi·∫øu userId!' });
    try {
        const students = await Student.find({ userId });
        res.json({ students });
    } catch (error) {
        console.error('L·ªói l·∫•y danh s√°ch sinh vi√™n:', error);
        res.status(500).json({ message: 'L·ªói server!' });
    }
});

// API th√™m sinh vi√™n
app.post('/api/students', async (req, res) => {
    const { name, email, class: studentClass, avgScore, targetScore, subject, userId } = req.body;
    console.log('Nh·∫≠n d·ªØ li·ªáu t·ª´ client:', req.body);
    if (!name || !email || !studentClass || !avgScore || !targetScore || !subject || !userId) {
        return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin!' });
    }
    try {
        const student = new Student({ name, email, class: studentClass, avgScore, targetScore, subject, userId });
        await student.save();
        console.log('ƒê√£ l∆∞u sinh vi√™n:', student);
        res.status(201).json({ message: 'Th√™m sinh vi√™n th√†nh c√¥ng!', student });
    } catch (error) {
        console.error('L·ªói khi l∆∞u sinh vi√™n:', error);
        res.status(500).json({ message: 'L·ªói server!', error: error.message });
    }
});

// API x√≥a sinh vi√™n
app.delete('/api/students/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const student = await Student.findByIdAndDelete(id);
        if (!student) return res.status(404).json({ message: 'Sinh vi√™n kh√¥ng t·ªìn t·∫°i!' });
        res.json({ message: 'X√≥a sinh vi√™n th√†nh c√¥ng!' });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server!' });
    }
});

// API ch·ªânh s·ª≠a sinh vi√™n
app.put('/api/students/:id', async (req, res) => {
    const { id } = req.params;
    const { name, email, class: studentClass, avgScore, targetScore, subject } = req.body;
    try {
        const student = await Student.findByIdAndUpdate(id, { name, email, class: studentClass, avgScore, targetScore, subject }, { new: true });
        if (!student) return res.status(404).json({ message: 'Sinh vi√™n kh√¥ng t·ªìn t·∫°i!' });
        res.json({ message: 'C·∫≠p nh·∫≠t sinh vi√™n th√†nh c√¥ng!', student });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server!' });
    }
});

// API l∆∞u ƒëi·ªÉm s·ªë
app.post('/api/scores', async (req, res) => {
    const { studentId, name, score, total, subject, date, level, recommendation } = req.body;
    if (!studentId || !name || score === undefined || !total || !subject || !date || !level) {
        return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒëi·ªÉm s·ªë!' });
    }
    try {
        if (!mongoose.Types.ObjectId.isValid(studentId)) {
            return res.status(400).json({ message: 'studentId kh√¥ng h·ª£p l·ªá!' });
        }
        const scoreData = new Score({
            studentId: new mongoose.Types.ObjectId(studentId),
            name,
            score,
            total,
            subject,
            date,
            level,
            recommendation
        });
        await scoreData.save();
        res.status(201).json({ message: 'ƒêi·ªÉm s·ªë ƒë√£ ƒë∆∞·ª£c l∆∞u!', score: scoreData });
    } catch (error) {
        console.error('L·ªói khi l∆∞u ƒëi·ªÉm:', error);
        res.status(500).json({ message: 'L·ªói server khi l∆∞u ƒëi·ªÉm!', error: error.message });
    }
});

// API l·∫•y danh s√°ch ƒëi·ªÉm s·ªë
app.get('/api/scores', async (req, res) => {
    const studentId = req.query.studentId;
    if (!studentId) {
        return res.status(400).json({ message: 'Thi·∫øu studentId!' });
    }
    try {
        if (!mongoose.Types.ObjectId.isValid(studentId)) {
            return res.status(400).json({ message: 'studentId kh√¥ng h·ª£p l·ªá!' });
        }
        const scores = await Score.find({ studentId: new mongoose.Types.ObjectId(studentId) });
        res.json({ scores });
    } catch (error) {
        console.error('L·ªói khi l·∫•y ƒëi·ªÉm:', error);
        res.status(500).json({ message: 'L·ªói server khi l·∫•y ƒëi·ªÉm!', error: error.message });
    }
});

// API x√≥a ƒëi·ªÉm s·ªë
app.delete('/api/scores/:scoreId', async (req, res) => {
    const { scoreId } = req.params;
    try {
        if (!mongoose.Types.ObjectId.isValid(scoreId)) {
            return res.status(400).json({ message: 'scoreId kh√¥ng h·ª£p l·ªá!' });
        }
        const score = await Score.findByIdAndDelete(scoreId);
        if (!score) return res.status(404).json({ message: 'ƒêi·ªÉm s·ªë kh√¥ng t·ªìn t·∫°i!' });
        res.json({ message: 'ƒêi·ªÉm s·ªë ƒë√£ ƒë∆∞·ª£c x√≥a!' });
    } catch (error) {
        console.error('L·ªói khi x√≥a ƒëi·ªÉm:', error);
        res.status(500).json({ message: 'L·ªói server khi x√≥a ƒëi·ªÉm!', error: error.message });
    }
});

// Middleware x·ª≠ l√Ω 404
app.use((req, res) => {
    console.log(`404 Not Found: ${req.method} ${req.url}`);
    res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y endpoint!' });
});

// Kh·ªüi ƒë·ªông server
const startServer = async () => {
    try {
        await connectDB();
        app.listen(PORT, () => {
            console.log(`üöÄ Server is running on http://localhost:${PORT}`);
        });
    } catch (error) {
        console.error('‚ùå L·ªói kh·ªüi ƒë·ªông server:', error.message);
    }
};
startServer();
// Th√™m c√°c model m·ªõi
const Progress = require('./models/Progress');
const FinalAssessment = require('./models/FinalAssessment');

// API l∆∞u ti·∫øn ƒë·ªô h·ªçc t·∫≠p
app.post('/api/progress', async (req, res) => {
    const { studentId, date, checkIn, chatCount, examCompleted, totalDays, startDate } = req.body;
    if (!studentId || !date || !totalDays || !startDate) {
        return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin!' });
    }
    try {
        if (!mongoose.Types.ObjectId.isValid(studentId)) {
            return res.status(400).json({ message: 'studentId kh√¥ng h·ª£p l·ªá!' });
        }
        let progress = await Progress.findOne({ studentId: new mongoose.Types.ObjectId(studentId), date: new Date(date) });
        if (progress) {
            // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô n·∫øu ƒë√£ t·ªìn t·∫°i
            progress.checkIn = checkIn !== undefined ? checkIn : progress.checkIn;
            progress.chatCount = chatCount !== undefined ? chatCount : progress.chatCount;
            progress.examCompleted = examCompleted !== undefined ? examCompleted : progress.examCompleted;
            progress.daysCompleted = Math.min(progress.daysCompleted + 1, totalDays);
            progress.progressPercentage = (progress.daysCompleted / totalDays) * 100;
            await progress.save();
        } else {
            // T·∫°o m·ªõi ti·∫øn ƒë·ªô
            progress = new Progress({
                studentId: new mongoose.Types.ObjectId(studentId),
                date: new Date(date),
                checkIn: checkIn || false,
                chatCount: chatCount || 0,
                examCompleted: examCompleted || false,
                totalDays,
                daysCompleted: 1,
                progressPercentage: (1 / totalDays) * 100,
                startDate: new Date(startDate),
            });
            await progress.save();
        }
        res.status(201).json({ message: 'C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô th√†nh c√¥ng!', progress });
    } catch (error) {
        console.error('L·ªói khi l∆∞u ti·∫øn ƒë·ªô:', error);
        res.status(500).json({ message: 'L·ªói server khi l∆∞u ti·∫øn ƒë·ªô!', error: error.message });
    }
});

// API l·∫•y ti·∫øn ƒë·ªô h·ªçc t·∫≠p
app.get('/api/progress', async (req, res) => {
    const { studentId } = req.query;
    if (!studentId) {
        return res.status(400).json({ message: 'Thi·∫øu studentId!' });
    }
    try {
        if (!mongoose.Types.ObjectId.isValid(studentId)) {
            return res.status(400).json({ message: 'studentId kh√¥ng h·ª£p l·ªá!' });
        }
        const progress = await Progress.find({ studentId: new mongoose.Types.ObjectId(studentId) }).sort({ date: 1 });
        res.json({ progress });
    } catch (error) {
        console.error('L·ªói khi l·∫•y ti·∫øn ƒë·ªô:', error);
        res.status(500).json({ message: 'L·ªói server khi l·∫•y ti·∫øn ƒë·ªô!', error: error.message });
    }
});

// API l∆∞u k·∫øt qu·∫£ b√†i ki·ªÉm tra ƒë√°nh gi√° nƒÉng l·ª±c
app.post('/api/final-assessment', async (req, res) => {
    const { studentId, score, total, subject, improvement } = req.body;
    if (!studentId || !score || !total || !subject) {
        return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin!' });
    }
    try {
        if (!mongoose.Types.ObjectId.isValid(studentId)) {
            return res.status(400).json({ message: 'studentId kh√¥ng h·ª£p l·ªá!' });
        }
        const finalAssessment = new FinalAssessment({
            studentId: new mongoose.Types.ObjectId(studentId),
            score,
            total,
            subject,
            improvement,
        });
        await finalAssessment.save();
        res.status(201).json({ message: 'L∆∞u k·∫øt qu·∫£ ƒë√°nh gi√° th√†nh c√¥ng!', finalAssessment });
    } catch (error) {
        console.error('L·ªói khi l∆∞u k·∫øt qu·∫£ ƒë√°nh gi√°:', error);
        res.status(500).json({ message: 'L·ªói server khi l∆∞u k·∫øt qu·∫£ ƒë√°nh gi√°!', error: error.message });
    }
});

// API l·∫•y k·∫øt qu·∫£ b√†i ki·ªÉm tra ƒë√°nh gi√° nƒÉng l·ª±c
app.get('/api/final-assessment', async (req, res) => {
    const { studentId } = req.query;
    if (!studentId) {
        return res.status(400).json({ message: 'Thi·∫øu studentId!' });
    }
    try {
        if (!mongoose.Types.ObjectId.isValid(studentId)) {
            return res.status(400).json({ message: 'studentId kh√¥ng h·ª£p l·ªá!' });
        }
        const finalAssessment = await FinalAssessment.find({ studentId: new mongoose.Types.ObjectId(studentId) });
        res.json({ finalAssessment });
    } catch (error) {
        console.error('L·ªói khi l·∫•y k·∫øt qu·∫£ ƒë√°nh gi√°:', error);
        res.status(500).json({ message: 'L·ªói server khi l·∫•y k·∫øt qu·∫£ ƒë√°nh gi√°!', error: error.message });
    }
});